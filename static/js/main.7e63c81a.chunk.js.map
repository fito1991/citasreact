{"version":3,"sources":["componentes/Header.js","componentes/AgregarCita.js","componentes/Cita.js","componentes/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","AgregarCita","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","crearNuevaCita","e","preventDefault","mascota","nombreMascotaRef","current","value","propietario","propietarioRef","fecha","fechaRef","hora","horaRef","sintomas","sintomasRef","setState","error","nuevaCita","id","uuid","crearCita","currentTarget","reset","state","React","createRef","existeError","onSubmit","ref","type","placeholder","Component","Cita","eliminarCita","borrarCita","info","_this$props$info","onClick","ListaCitas","citas","mensaje","keys","length","map","cita","componentes_Cita","key","App","concat","toConsumableArray","console","log","citasActuales","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","componentes_Header","componentes_AgregarCita","componentes_ListaCitas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e63c81a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n    return(\n        <header>\n            <h1 className=\"text-center\">\n                {props.titulo}\n            </h1>\n        </header>\n    );\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\n\nclass AgregarCita extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            error: false\n        };\n\n        this.nombreMascotaRef = React.createRef();\n        this.propietarioRef = React.createRef();\n        this.fechaRef = React.createRef();\n        this.horaRef = React.createRef();\n        this.sintomasRef = React.createRef();\n    }\n\n    crearNuevaCita = (e) => {\n        e.preventDefault();\n\n        const \n            mascota = this.nombreMascotaRef.current.value,\n            propietario = this.propietarioRef.current.value,\n            fecha = this.fechaRef.current.value,\n            hora = this.horaRef.current.value,\n            sintomas = this.sintomasRef.current.value;\n\n            if (mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '') {\n                this.setState({\n                    error: true\n                });\n            } else {\n\n                const nuevaCita = {\n                    id: uuid(),\n                    mascota: mascota,\n                    propietario: propietario,\n                    fecha: fecha,\n                    hora: hora,\n                    sintomas: sintomas\n                }\n                \n                // se envia el objeto hacia el padre para actuallizar el state\n                this.props.crearCita(nuevaCita);\n        \n                // reinicar el formulario\n                e.currentTarget.reset();\n\n                // Eliminar el error\n                this.setState({\n                    error: false\n                })\n            }\n\n\n    }\n\n    render() {\n\n        const existeError = this.state.error;\n\n        return (\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">                \n                    <h2 className=\"card-title text-center mb-5\">\n                        Agrega las citas aquí\n                    </h2>\n                    <form onSubmit={this.crearNuevaCita}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input ref={this.nombreMascotaRef} type=\"text\" className=\"form-control\" placeholder=\"Nombre Mascota\" \n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <input ref={this.propietarioRef} type=\"text\" className=\"form-control\"  placeholder=\"Nombre Dueño de la Mascota\"\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\n                            <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\n                                <input ref={this.fechaRef} type=\"date\" className=\"form-control\" />\n                            </div>                            \n\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\n                            <div className=\"col-sm-8 col-lg-4\">\n                                <input ref={this.horaRef} type=\"time\" className=\"form-control\"/>\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Sintomas</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <textarea ref={this.sintomasRef} className=\"form-control\"></textarea>\n                            </div>\n                        </div>\n                        <div className=\"form-group row justify-content-end\">\n                            <div className=\"col-sm-3\">\n                                <button type=\"submit\" className=\"btn btn-success w-100\">Agregar</button>\n                            </div>\n                        </div>\n                    </form>\n                    {existeError ? <div className=\"alert alert-danger text-center\">Todos los campos son obligatorios</div> : ''}\n                </div>\n            </div>\n        );\n    }\n}\n\nAgregarCita.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\nexport default AgregarCita;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cita extends Component {\n\n    eliminarCita = () => {\n        this.props.borrarCita(this.props.info.id);\n    }\n\n    render() {\n\n        const {fecha, hora, mascota, propietario, sintomas} = this.props.info;\n        \n        return (\n            <div className=\"media mt-3\">\n                <div className=\"media-body\">\n                    <h3 className=\"mt-0\">{mascota}</h3>\n                    <p className=\"card-text\"><span>Nombre del dueño: </span>{propietario}</p>\n                    <p className=\"card-text\"><span>Fecha: </span>{fecha}</p>\n                    <p className=\"card-text\"><span>Hora: </span>{hora}</p>\n                    <p className=\"card-text\"><span>Síntomas: </span></p>\n                    <p className=\"card-text\">{sintomas}</p>\n\n                    <button onClick={this.eliminarCita} className=\"btn btn-danger\">\n                        Borrar &times;\n                    </button>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nCita.propTypes = {\n    info: PropTypes.shape({\n        fecha: PropTypes.string.isRequired,\n        hora: PropTypes.string.isRequired,\n        mascota: PropTypes.string.isRequired,\n        propietario: PropTypes.string.isRequired,\n        sintomas: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired\n    }),\n    borrarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import React, { Component } from 'react';\nimport Cita from './Cita';\nimport PropTypes from 'prop-types';\n\nclass ListaCitas extends Component {\n    render() {\n\n        const citas = this.props.citas;\n\n        const length = Object.keys(citas).length;\n\n        const mensaje = length === 0 ? 'No hay citas' : 'Administra tus citas aquí';\n\n        return (\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title text-center\">\n                        {mensaje}\n                    </h2>\n                    \n                    <div className=\"lista-citas\">\n                        {Object.keys(this.props.citas).map(cita => ( \n                            <Cita \n                                key={cita}\n                                info={this.props.citas[cita]}\n                                borrarCita={this.props.borrarCita}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nListaCitas.propTypes = {\n    citas: PropTypes.array.isRequired,\n    borrarCita: PropTypes.func.isRequired\n}\n\nexport default ListaCitas;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport AgregarCita from './componentes/AgregarCita';\nimport ListaCitas from './componentes/ListaCitas';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      citas: []\n    };\n  }\n\n  componentDidMount() {\n    const citasLS = localStorage.getItem('citas');\n    if (citasLS) {\n      this.setState({\n        citas: JSON.parse(citasLS)\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    // setItem agrega algo al storage y getItem obtiene algo del storage\n    // Storage solo puede almacenar cadenas de texto\n    localStorage.setItem(\n      'citas',\n      JSON.stringify(this.state.citas)\n    );\n  }\n\n  crearCita = (nuevaCita) => {\n    // console.log(cita);\n    const citas = [...this.state.citas, nuevaCita];\n\n    console.log(citas);\n\n    this.setState({\n      citas: citas\n    });\n  }\n\n  borrarCita = id => {\n    console.log(id);\n\n    // Obtener copia del state\n    const citasActuales = [...this.state.citas];\n\n    console.log('Antes...');\n    console.log(citasActuales);\n\n    // borrar el elemento del state\n    const citas = citasActuales.filter(cita => cita.id !== id);\n\n    console.log('Despues...');\n    console.log(citas);\n\n    // Actualizar el state\n    this.setState({\n      citas: citas\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          titulo={'Administrador de Pacientes de Veterinaria'}\n        />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <AgregarCita\n              crearCita={this.crearCita}\n            />\n          </div>\n          <div className=\"col-md-6\">\n            <ListaCitas \n              citas={this.state.citas}\n              borrarCita={this.borrarCita}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}